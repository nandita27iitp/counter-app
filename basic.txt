The JavaScript will execute before any HTML. This typically causes issues since the HTML elements you select with JavaScript will be undefined because the browser reads HTML code from top to bottom.

We'll use the defer attribute of the script element to correct that, which instructs the browser to load HTML first before running JavaScript code.

<script defer src="script.js"></script>


How to Use Variables in JavaScript?

A variable is a placeholder for values that you might need to use in the future. With JavaScript, everything is stored in variables.

To declare a variable, you can either use the let or const keyword.

let first_variable
const last_variable

You use the equality sign to assign a value to a variable.

let first_variable = “hello world”

If you declare a variable with let, you can modify it. On the other hand, if you declare variables with const, you can't change their values – hence the name.

In JavaScript, you can store multiple data types in variables:

Strings – Any value that is single or double and wrapped in quotations is a string.
let my_string = "Hello world" // string
let my_second_string = "24" // string

Numbers – These numbers are not enclosed in quotation marks.
let my_number = 15 // number
let my_second_number = "15" // string

Arrays – The array is your best option if you want to store several values in a single variable.
let my_array = [1, "hello", "4", "world"]

Boolean – You do not need to enclose a boolean value in quotations because it is a true or false value and not a string.
let my_boolean = true;

Objects – Objects allow you to store data in key-value pairs.
let my_obj = {
    name: "John snow",
    aim: "Learning JavaScript",
    age: 20,
}

Since JavaScript interprets everything as an object, you can even save references to HTML elements in variables.

let my_button = document.querySelector("#id")

We're selecting elements on a web page based on their id when we use the document.querySelector("#id"). 

To use a variable in JavaScript, simply call the variable name like this:

my_button

1. Avoid using underscores at the beginning of variable names, such as _my_variable, as they are very confusing.

2. JavaScript won't let you start variable names with numbers, such as 8_variable.

3. my_variable, MY_VARIABLE, and my_Variable are all entirely different things in JavaScript because of case sensitivity.

4. And under no circumstances should you use any JavaScript reserved words, including let, const, true, false, function, and any others.


How to Use Operators in JavaScript


Addition – In JavaScript, you use the plus (+) sign to concatenate (join) strings or add numbers.
let addition = 1 + 1 // 2
let addition = 1 + "1" // "11"
let addition = "hello" + "world" // "hello world"

Subtraction – you use the minus sign (-) to subtract numbers.
let subtraction = 10 - 9 // 1

Multiplication – you use an asterisk for multiplication in JavaScript when multiplying numbers.
let multiplication = 2 * 2 // 4

Division – you use the division sign (/) to divide numbers.
let division = 4 / 2 // 2

Equality – you use the double equal sign (==) to check whether two values are equal in JavaScript.
let if_true = 2 + 4 == 6 // true
let if_false = 5 + 6 == 10 // false


Now, all we have to do to use our add variable is to call its name.
We need to know if it has been clicked, and JavaScript provides us with what we refer to as Events. We use them to listen to events that occur on a web page, such as when a user clicks a button or scrolls down the page, among other things.

Here's what this looks like:

add.addEventListener("click", function () {
 // Every time the add button is pressed, this code will execute.
});

It's not necessary for this to make sense straight away. In this case, we used the addEventListener to add a click event to the button. 

Now, whatever code is within the listener's callback gets called when the button is clicked.

Now that we are aware of this, let's increase the output value. To do this, simply obtain the output value and then increase it by one whenever the button is pressed. Here's the code to do that:

let add = document.querySelector("#add");

add.addEventListener("click", function () {
  let output = document.querySelector("#output");
  let result = output.innerText + 1;

  output.innerText = result;
});

With the exception of the innerText, which is used in JavaScript to obtain the text from HTML elements on a web page and can also modify an HTML element's text as seen above, the majority of the syntax above should now be recognizable.

the value of  let output = document.querySelector("#output") is a string and JavaScript does not allow you to add strings and numbers, you must convert the output to a number before adding.

let result = Number(output.innerText) + 1;
In the code above, we changed our string into a number using the Number() method.

How to Use Conditionals in JavaScript
Conditionals are used to solve questions like, "What if we want our counter app to stop counting at 10?" or "What if we want to skip a number?" When you're faced with conditional questions like these, you're in need of a conditional.

The only conditionals we'll be looking at today in JavaScript are if...else statements.

if (condition) {
  /* code to run if condition is true */
} else {
  /* run some other code instead */
}
Conditionals allow us to run code only when a given condition is met. For example, if our counter is greater than 10, we can reset it back to zero (0).

let add = document.querySelector("#add");

add.addEventListener("click", function () {
  let output = document.querySelector("#output");
  let result = output.innerText + 1;

  if (result > 10) {
    result = 0;
  }

  output.innerText = result;
});
If the result is more than 10, the if statement in the preceding code returns the result to 0. In the following example, try increasing the counter to a number greater than 10.


You'll see that we omitted the else statement. That's because it's optional.

How to Use Functions in JavaScript
We're finally wrapping up our small counter app. Let's add the ability to subtract. All we have to do is deduct 1 from the output.

let add = document.querySelector("#add");
let subract = document.querySelector("#subtract");

add.addEventListener("click", function () {
  let output = document.querySelector("#output");
  let result = Number(output.innerText) + 1;

  if (result > 10) {
    result = 0;
  }

  output.innerText = result;
});

subract.addEventListener("click", function () {
  let output = document.querySelector("#output");
  let result = Number(output.innerText) - 1;

  if (result < 0) {
    result = 0;
  }

  output.innerText = result;
});


You can use the function keyword in JavaScript to create a function.

function add() {
  alert("hello world")
}
Functions can also take parameters.

function add(number1, number2) {
 return number1 + number2
}
These parameters are used in the same way as variables are in a function. They are essentially placeholders.

Functions, like variables, are called by their names. The only difference is that when invoking a function, you must include parenthesis – ().

add(2,4) // 6
You may have seen functions declared in this manner as well:

const add = (number1, number2) => number1 + number2;
The above is equivalent to the formal add() function. They are known as arrow functions, and that is how we will declare our functions from now on.